package register;

import java.io.File;
import java.io.Serializable;
import java.util.Arrays;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * register.Person register.
 */
public class ArrayRegister implements Serializable {
	/** register.Person array. */
	private Person[] persons;

	/** Number of persons in this register. */
	private int count;

	/**
	 * Constructor creates an empty register with maximum size specified.
	 * 
	 * @param size
	 *            maximum size of the register
	 */

	public ArrayRegister(int size) {
		persons = new Person[size];
		count = 0;
	}

	/**
	 * Returns the number of persons in this register.
	 * 
	 * @return the number of persons in this register
	 */
	public int getCount() {
		return count;
	}

	/**
	 * Returns the maximum number of persons in this register.
	 * 
	 * @return the maximum number of persons in this register.
	 */
	public int getSize() {
		return persons.length;
	}

	/**
	 * Returns the person at the specified position in this register.
	 * 
	 * @param index
	 *            index of the person to return
	 * @return person the person at the specified position in this register
	 */
	public Person getPerson(int index) {
		return persons[index];
	}

	/**
	 * Appends the specified person to the end of this register.
	 * 
	 * @param person
	 *            person to append to this register
	 */
	public void addPerson(Person person) {
		persons[count] = person;
		count++;
	}

	void setPerson(Person person, int a) {
		persons[a] = person;
	}

	// TODO: Implement the method findPersonByName
	/**
	 * Returns the person with specified name in this register or
	 * <code>null</code>, if match can not be found.
	 * 
	 * @param name
	 *            name of a person to search for
	 * @return person with specified phone number
	 */
	public Person findPersonByName(String name) {

//		int nameLength = name.length();
		String findStr = "";
		int j = 0;
		for (int i = 0; i < persons.length; i++) {
			if (persons[i] != null) {
				findStr = persons[i].getName();
				if (name.equals(findStr)) {
					return persons[i];
				}
			}
		}
		return null;
	}

	// TODO: Implement the method findPersonByPhoneNumber
	/**
	 * Returns the person with specified phone number in this register or
	 * <code>null</code>, if match can not be found.
	 * 
	 * @param phoneNumber
	 *            phone number of a person to search for
	 * @return person with specified phone number
	 */
	public Person findPersonByPhoneNumber(String phoneNumber) {
//		int numberLength = phoneNumber.length();
		String findStr = "";

		for (int i = 0; i < persons.length; i++) {
			if (persons[i] != null) {
				findStr = persons[i].getPhoneNumber();				
				if (phoneNumber.equals(findStr)) {
					return persons[i];
				}
			}
		}

		return null;
	}

	/**
	 * 1
	 * 
	 * Removes the specified person from the register.
	 * 
	 * @param person
	 *            person to remove
	 */
	public void removePerson(Person person) {

		for (int i = 0; i < persons.length; i++) {
			if (persons[i] != null) {
				if (persons[i].equals(person)) {
					persons[i] = null;
					count--;
					for (int j = i; j < persons.length - 1; j++) {
						if (persons[j + 1] != null) {
							persons[j] = persons[j + 1];
						} else {
							persons[j] = null;
						}
					}

				} else {

				}
			}
		}

	}
}
